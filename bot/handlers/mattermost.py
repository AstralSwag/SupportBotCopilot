from fastapi import APIRouter, Request, HTTPException
from bot.handlers.tickets import get_ticket_by_mattermost_post_id, get_user_by_id
from bot.bot import bot
from bot.database import get_session
from bot.services.mattermost import mattermost_service
from bot.models.models import Message
from bot.config import settings
from sqlalchemy import select
import logging
from datetime import datetime

logger = logging.getLogger(__name__)
router = APIRouter()

@router.post("/webhook/mattermost")
async def mattermost_webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Mattermost"""
    try:
        data = await request.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Mattermost: {data}")
        
        post_id = data.get("post_id")
        if not post_id:
            logger.warning("post_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–∞")
            return {"status": "post_id not found"}
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ —á–µ—Ä–µ–∑ API Mattermost
        post_info = await mattermost_service.get_post(post_id)
        if not post_info:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ {post_id}")
            return {"status": "post not found"}
            
        root_id = post_info.get("root_id", post_id)  # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–æ—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º post_id
        
        async for session in get_session():
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ –ø–æ root_id
            ticket = await get_ticket_by_mattermost_post_id(session, root_id)
            if not ticket:
                logger.warning(f"–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è root_id: {root_id}")
                return {"status": "ticket not found"}
                
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = await get_user_by_id(session, ticket.user_id)
            if not user:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ticket_id: {ticket.id}")
                return {"status": "user not found"}
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            message = Message(
                ticket_id=ticket.id,
                content=data.get("text", ""),
                sender_type="support",
                created_at=datetime.now()
            )
            session.add(message)
            await session.commit()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if data.get("user_id") == settings.MATTERMOST_SUPPORT_USER_ID or data.get("user_name") == settings.MATTERMOST_SUPPORT_USERNAME:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data.get('user_name')} ({data.get('user_id')})")
                return {"status": "ignored"}
        
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            message_text = data.get("text", "").strip()
            if message_text:
                await bot.send_message(
                    chat_id=user.telegram_id,
                    text=f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∞—à–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏:\n\n{message_text}"
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                
            return {"status": "success"}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e)) 